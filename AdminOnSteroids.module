<?php

/**
 * AdminOnSteroids
 * Various admin tweaks
 *
 * @author Roland Toth (tpr)
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class AdminOnSteroids extends WireData implements Module, ConfigurableModule {

    static $configData;

    public static function getModuleInfo() {
        return array(
            'title'     => 'AdminOnSteroids',
            'class'     => 'AdminOnSteroids',
            'version'   => 23,
            'summary'   => __('Various admin tweaks'),
            'author'    => 'Roland Toth',
            'autoload'  => 'template=admin',
            'href'      => 'https://processwire.com/talk/topic/13389-adminonsteroids/',
            'icon'      => 'medkit',
            'requires' => 'ProcessWire>=2.3.0, PHP>=5.3.8',
            'singular'  => true,
            'permanent' => false
        );
    }

    /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
        return array(
            'enabledSubmodules'            => array(
                'AutosizeTextareas',
                'AsmTweaks',
                'DeselectRadios',
                'NoAnims',
                'FileFieldToolbar',
                'FocusInputOnLangTabSwitch',
                'LangTabHotkeySwitcher',
                'AdminTweaks',
                'RenoTweaks',
                'LongClickDuration',
                'HoverSaveDropdown',
                'Hotkeys',
                'PagePreviewLink',
                'LoadCollapsedModuleInfos',
                'fixScrollbarJump'
            ),
            'DeselectRadios'               => array(
                'adminOnly'
            ),
            'AsmTweaks'                    => array(
                'collapseAsmSections',
                'leftAsmDelete'
            ),
            'FileFieldToolbar'             => array(
                'filterbox'
            ),
            'FocusInputOnLangTabSwitch'    => array(
                'focus'
            ),
            'Hotkeys'                      => array(
                'save'
            ),
            'FocusInputOnLangTabSwitchCKE' => array(
                'focus'
            ),
            'PagePreviewLink'              => array(
                'pw-blank'
            ),
            'LongClickDuration'            => 600,
            'RenoTweaks'                   => array(
                'singleClickSidebarHeaders',
                'stickyHeader',
                'stickyHeaderCompact',
                'stickySidebar',
                'stickyCKEditorToolbar',
//                'autoHideSidebar',
                'alwaysVisibleSidebarItems',
//                'hideSidebarQuickLinks',
//                'oneLineSidebarSubmenus',
                'headButtonNextToTitle',
                'alwaysShowSearch',
                'closeNoticeButtonToLeft'
            ),
            'AdminTweaks'                  => array(
                'stickyHeader'
            )
        );
    }

    public function __toString() {
        return __CLASS__;
    }

    public function ___install() {
        // apply default module settings on install
        $this->wire('modules')->saveModuleConfigData($this, self::getDefaultData());
    }


    public function ready() {

        self::$configData = $this->modules->getModuleConfigData($this);
        $defaultData = self::getDefaultData();


        $root = $this->config->urls->siteModules . __CLASS__;
        $styles = $this->config->styles;
        $scripts = $this->config->scripts;

        $enabledSubmodules = isset(self::$configData['enabledSubmodules']) ? self::$configData['enabledSubmodules'] : false;

        if (!$enabledSubmodules) {
            return false;
        }

        //AutosizeTextareas
        $subModule = 'AutosizeTextareas';
        if (in_array($subModule, $enabledSubmodules)) {
            $scripts->add($root . '/' . $subModule . '/Autosize.js');
            $scripts->add($root . '/' . $subModule . '/' . $subModule . '.js');
        }

        //DeselectRadios
        $subModule = 'DeselectRadios';
        if (in_array($subModule, $enabledSubmodules)) {
            if (!in_array('adminOnly', self::$configData['DeselectRadios']) || $this->wire('user')->isSuperUser()) {
                $scripts->add($root . '/' . $subModule . '/' . $subModule . '.js');
            }
        }

        //AsmTweaks
        $subModule = 'AsmTweaks';
        if (in_array($subModule, $enabledSubmodules)) {
            $scripts->add($root . '/' . $subModule . '/' . $subModule . '.js');
        }

        //FocusInputOnLangTabSwitch
        $subModule = 'FocusInputOnLangTabSwitch';
        if (in_array($subModule, $enabledSubmodules)) {
            $scripts->add($root . '/' . $subModule . '/' . $subModule . '.js');
        }

        //Hotkeys
        $subModule = 'Hotkeys';
        if (in_array($subModule, $enabledSubmodules)) {
            $scripts->add($root . '/' . $subModule . '/' . $subModule . '.js');
        }

        //LangTabHotkeySwitcher
        $subModule = 'LangTabHotkeySwitcher';
        if (in_array($subModule, $enabledSubmodules)) {
            $scripts->add($root . '/' . $subModule . '/' . $subModule . '.js');
        }

        //LongClickDuration
        $subModule = 'LongClickDuration';
        if (in_array($subModule, $enabledSubmodules)) {

            $LongClickDuration = (int)self::$configData['LongClickDuration'];

            //do not allow lower value than default 600
            $LongClickDuration = ($LongClickDuration < $defaultData['LongClickDuration']) ? $defaultData['LongClickDuration'] : $LongClickDuration;

            $configSettings['LongClickDuration'] = $LongClickDuration;
        } else {
            // need to set default value explicitly
            $configSettings['LongClickDuration'] = $defaultData['LongClickDuration'];
        }

//        $styles->add($root . '/' . __CLASS__ . '.css');
        $styles->prepend($root . '/' . __CLASS__ . '.css');

        // also add global JS
        $scripts->add($root . '/' . __CLASS__ . '.js');

        // note: $configSettings overwrite $configData (intentional)
        $this->config->js("AdminOnSteroids", json_encode(array_merge(self::$configData, $configSettings)));

        // Load module info fields collapsed
        if (in_array('LoadCollapsedModuleInfos', $enabledSubmodules)) {

            $this->addHookAfter('InputfieldMarkup::render', function ($event) {

                $field = $event->object;

                if ($field->id == 'ModuleInfo') {
                    $field->addClass('InputfieldStateCollapsed');
                }
            });
        }
    }


    public static function getModuleConfigInputfields(array $data) {

        $defaultData = self::getDefaultData();
        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'enabledSubmodules');
        $f->columnWidth = 36;
        $f->label = __('Submodules', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->table = true;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('AutosizeTextareas', __('Autosize textareas according to content', __FILE__));
        $f->addOption('DeselectRadios', __('Enable clearing checked radio buttons', __FILE__) . ' [...]');
        $f->addOption('NoAnims', __('Disable all admin animations', __FILE__));
        $f->addOption('AsmTweaks', __('asmSelect tweaks', __FILE__) . ' [...]');
        $f->addOption('FileFieldToolbar', __('Add filter box and sort buttons to file/image fields', __FILE__) . ' [...]');
        $f->addOption('HoverSaveDropdown', __('Show save dropdown on hover instead on click', __FILE__));
        $f->addOption('FocusInputOnLangTabSwitch', __('Focus input on switching language tabs', __FILE__) . ' [...]');
        $f->addOption('LangTabHotkeySwitcher', __('Switch language tabs on ctrl+arrow keys', __FILE__));
        $f->addOption('Hotkeys', __('Hotkey tweaks', __FILE__) . ' [...]');
        $f->addOption('LongClickDuration', __('Custom long-click action duration', __FILE__) . ' [...]');
        $f->addOption('LoadCollapsedModuleInfos', __('Load module info fields collapsed', __FILE__));
        $f->addOption('PagePreviewLink', __('Add preview link next to page title', __FILE__));
        $f->addOption('fixScrollbarJump', __('Prevent page jump when scrollbar appears', __FILE__));
        $f->addOption('AdminTweaks', __('Default admin theme tweaks', __FILE__) . ' [...]');
        $f->addOption('RenoTweaks', __('Reno admin theme tweaks', __FILE__) . ' [...]');

        $f->attr('value', isset($data['enabledSubmodules']) ? $data['enabledSubmodules'] : $defaultData['enabledSubmodules']);

        $wrapper->add($f);


        $fset = wire('modules')->get("InputfieldFieldset");
        $fset->columnWidth = 64;
//        $fset->label = 'Tunings';
        $fset->collapsed = Inputfield::collapsedNever;


        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'DeselectRadios');
        $f->label = 'DeselectRadios settings';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->showIf = 'enabledSubmodules=DeselectRadios';

        $f->addOption('adminOnly', __('Only for SuperUsers', __FILE__));
        $f->addOption('allowRequired', __('Allow also for required fields (not recommended)', __FILE__));

        $f->attr('value', isset($data['DeselectRadios']) ? $data['DeselectRadios'] : $defaultData['DeselectRadios']);

        $fset->add($f);


        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'AsmTweaks');
        $f->label = __('asmSelect settings', __FILE__);
        $f->showIf = 'enabledSubmodules=AsmTweaks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('collapseAsmSections', __('Collapse fieldset/tab items on double click', __FILE__));
        $f->addOption('leftAsmDelete', __('Move delete button to the left', __FILE__));

        if ($data['AsmTweaks']) {
            $f->attr('value', $data['AsmTweaks']);
        }

        $fset->add($f);


        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'FocusInputOnLangTabSwitch');
        $f->label = __('FocusInputOnLangTabSwitch settings', __FILE__);
        $f->showIf = 'enabledSubmodules=FocusInputOnLangTabSwitch';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->columnWidth = 50;


        $f->addOption('focus', __('Focus', __FILE__));
        $f->addOption('moveEnd', __('Move cursor to the end', __FILE__));
        $f->addOption('selectAll', __('Select all', __FILE__));
        $f->addOption('nothing', __('Do nothing', __FILE__));

        if ($data['FocusInputOnLangTabSwitch']) {
            $f->attr('value', $data['FocusInputOnLangTabSwitch']);
        }

        $fset->add($f);


        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'FocusInputOnLangTabSwitchCKE');
        $f->label = __('FocusInputOnLangTabSwitch settings (CKEditor)', __FILE__);
        $f->showIf = 'enabledSubmodules=FocusInputOnLangTabSwitch';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->columnWidth = 50;

        $f->addOption('focus', __('Focus', __FILE__));
        $f->addOption('moveEnd', __('Move cursor to the end', __FILE__));
        $f->addOption('selectAll', __('Select all', __FILE__));
        $f->addOption('nothing', __('Do nothing', __FILE__));

        if ($data['FocusInputOnLangTabSwitchCKE']) {
            $f->attr('value', $data['FocusInputOnLangTabSwitchCKE']);
        }

        $fset->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'FileFieldToolbar');
        $f->label = __('FileFieldToolbar settings', __FILE__);
        $f->showIf = 'enabledSubmodules=FileFieldToolbar';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('filterbox', __('Filter box', __FILE__));

        if ($data['FileFieldToolbar']) {
            $f->attr('value', $data['FileFieldToolbar']);
        }

        $fset->add($f);

        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'Hotkeys');
        $f->label = __('Hotkeys settings', __FILE__);
        $f->showIf = 'enabledSubmodules=Hotkeys';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('save', __('Save on ctrl+s', __FILE__));

        if ($data['Hotkeys']) {
            $f->attr('value', $data['Hotkeys']);
        }

        $fset->add($f);

        $f = wire('modules')->get("InputfieldText");
        $f->attr('name', 'LongClickDuration');
        $f->label = __('LongClickDuration (milliseconds)', __FILE__);
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->showIf = 'enabledSubmodules=LongClickDuration';
        $f->attr('style', 'width: 100px;');
        $f->collapsed = Inputfield::collapsedNever;

        $f->attr('value', (isset($data['LongClickDuration']) && (int)$data['LongClickDuration'] >= $defaultData['LongClickDuration']) ? $data['LongClickDuration'] : $defaultData['LongClickDuration']);

        $fset->add($f);


        $f = wire('modules')->get("InputfieldRadios");
        $f->attr('name', 'PagePreviewLink');
        $f->label = __('PagePreviewLink', __FILE__);
        $f->showIf = 'enabledSubmodules=PagePreviewLink';
        $f->collapsúed = Inputfield::collapsedNever;
//        $f->optionColumns = 3;

        $f->addOption('pw-blank', __('Preview in new tab', __FILE__));
        $f->addOption('pw-panel', __('Preview in panel', __FILE__));
        $f->addOption('pw-modal', __('Preview in modal', __FILE__));

        if ($data['PagePreviewLink']) {
            $f->attr('value', $data['PagePreviewLink']);
        }

        $fset->add($f);


        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'AdminTweaks');
        $f->label = __('AdminTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=AdminTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('stickyHeader', __('Sticky header', __FILE__));

        if ($data['AdminTweaks']) {
            $f->attr('value', $data['AdminTweaks']);
        }

        $fset->add($f);


        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'RenoTweaks');
        $f->label = __('RenoTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=RenoTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('stickyHeader', __('Sticky header', __FILE__));
        $f->addOption('stickyHeaderCompact', __('Compact header', __FILE__));
        $f->addOption('stickyCKEditorToolbar', __('Sticky CKEditor toolbar', __FILE__));
        $f->addOption('stickySidebar', __('Sticky sidebar', __FILE__));
        $f->addOption('autoHideSidebar', __('Autohide sidebar', __FILE__));
        $f->addOption('oneLineSidebarSubmenus', __('One-line sidebar submenus (only with autoHideSidebar)', __FILE__));
        $f->addOption('alwaysVisibleSidebarItems', __('Always show sidebar items (disable accordion)', __FILE__));
        $f->addOption('singleClickSidebarHeaders', __('Single click navigation of sidebar headers', __FILE__));
        $f->addOption('alwaysShowSearch', __('Always show search field', __FILE__));
        $f->addOption('headButtonNextToTitle', __('Place header button next to the main title', __FILE__));
        $f->addOption('hideSidebarQuickLinks', __('Hide sidebar quick links (flash icons)', __FILE__));
        $f->addOption('closeNoticeButtonToLeft', __('Move notice close buttons to the left', __FILE__));

        if ($data['RenoTweaks']) {
            $f->attr('value', $data['RenoTweaks']);
        }

        $fset->add($f);


        $wrapper->add($fset);

        return $wrapper;
    }
}
